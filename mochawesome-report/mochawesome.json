{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 5,
    "pending": 0,
    "failures": 0,
    "start": "2024-09-25T10:11:07.337Z",
    "end": "2024-09-25T10:11:07.487Z",
    "duration": 150,
    "testsRegistered": 5,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f021a57e-ac04-4c20-86ee-b771dad9d6cb",
      "title": "",
      "fullFile": "/home/syed/pactumApiTest/test/apiTest.js",
      "file": "/test/apiTest.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "95c76fcd-6b08-4a25-bbcf-27d2599ce673",
          "title": "API Functional Test Scripts",
          "fullFile": "/home/syed/pactumApiTest/test/apiTest.js",
          "file": "/test/apiTest.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"API Functional Test Scripts\"",
              "fullTitle": "API Functional Test Scripts \"before all\" hook in \"API Functional Test Scripts\"",
              "timedOut": false,
              "duration": 39,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await connectDB();\nawait User.deleteMany({});",
              "err": {},
              "uuid": "446f3353-f469-4aea-88b1-7973c08bd960",
              "parentUUID": "95c76fcd-6b08-4a25-bbcf-27d2599ce673",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"API Functional Test Scripts\"",
              "fullTitle": "API Functional Test Scripts \"after all\" hook in \"API Functional Test Scripts\"",
              "timedOut": false,
              "duration": 4,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// await User.deleteMany({});\nawait disconnect();",
              "err": {},
              "uuid": "00e390f8-5745-4285-b2a4-ad0d65ef4b68",
              "parentUUID": "95c76fcd-6b08-4a25-bbcf-27d2599ce673",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Create new Users",
              "fullTitle": "API Functional Test Scripts Create new Users",
              "timedOut": false,
              "duration": 53,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "for (const userData of data) {\n    \ntry {\n   \n    const existingUser = await User.findOne({ email: userData.email });\n    if (existingUser) {\n        throw new Error('User already exists');\n    }\n    \n  \n    const response = await pactum.spec()\n        .post('/api/user')\n        .withJson(userData)\n        .expectStatus(201)\n        .expectJsonMatch({\n            \"message\": 'User created successfully',\n            \"user\": {\n                \"name\": userData.name \n            }\n        })\n        .expectJsonSchema({\n            \"type\": \"object\",\n            \"properties\": {\n              \"message\": {\n                \"type\": \"string\",\n                \"enum\": [\"User created successfully\"]\n              },\n              \"user\": {\n                \"type\": \"object\",\n                \"properties\": {\n                  \"name\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"required\": [\"name\"]\n              }\n            },\n            \"required\": [\"message\", \"user\"]\n          }\n          );\n    \n    \n    const createdUser = await User.findOne({ email: userData.email });\n    expect(createdUser).to.not.be.null;\n    expect(createdUser.name).to.equal(userData.name); \n} catch (error) {\n    console.error('Error occurred during the test:', error);\n    throw error; \n}\n    }",
              "err": {},
              "uuid": "e97bd7fd-79a6-40ca-bb5b-59d414cbc930",
              "parentUUID": "95c76fcd-6b08-4a25-bbcf-27d2599ce673",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Retrieve Created Users",
              "fullTitle": "API Functional Test Scripts Retrieve Created Users",
              "timedOut": false,
              "duration": 25,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "for (const userData of data) {\n    try {\n        \n        const response = await pactum.spec()\n            .get(`/api/user/${userData.email}`)\n            .expectStatus(200)\n            .expectJsonMatch({\n                email: userData.email,\n                name: userData.name\n            })\n            .expectJsonSchema({\n                \"type\": \"object\",\n                \"properties\": {\n                  \"email\": {\n                    \"type\": \"string\",\n                    \"format\": \"email\"\n                  },\n                  \"name\": {\n                    \"type\": \"string\"\n                  }\n                },\n                \"required\": [\"email\", \"name\"]\n              }\n              );\n    \n       \n        const retrievedUser = await User.findOne({ email: userData.email });\n        expect(retrievedUser).to.not.be.null;\n        expect(retrievedUser.email).to.equal(userData.email); \n        expect(retrievedUser.name).to.equal(userData.name); \n        console.log(response.body);\n    \n    } catch (error) {\n        console.error('Error occurred while retrieving user:', error);\n        throw error; \n    }\n}",
              "err": {},
              "uuid": "6761b87e-2157-444f-b71f-dcc84eac0ce5",
              "parentUUID": "95c76fcd-6b08-4a25-bbcf-27d2599ce673",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update User Name and Email",
              "fullTitle": "API Functional Test Scripts Update User Name and Email",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedData = {\n    \"email\": \"updatedEmail@gmail.com\", \n    \"name\": \"UpdatedName\"\n};\n\nawait pactum.spec()\n    .put(`/api/user/{email}`)\n    .withPathParams('email', 'John@gmail.com') \n    .withJson(updatedData)\n    .expectStatus(200)\n    .expectJsonLike({\n        \"message\": 'User updated successfully',\n        \"user\": {\n            \"name\": updatedData.name,\n            \"email\": updatedData.email \n        }\n    })\n    .expectJsonSchema({\n        \"type\": \"object\",\n        \"properties\": {\n          \"message\": {\n            \"type\": \"string\",\n            \"enum\": [\"User updated successfully\"]\n          },\n          \"user\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"name\": {\n                \"type\": \"string\"\n              },\n              \"email\": {\n                \"type\": \"string\",\n                \"format\": \"email\"\n              }\n            },\n            \"required\": [\"name\", \"email\"]\n          }\n        },\n        \"required\": [\"message\", \"user\"]\n      }\n      );\n    \n     \nconst updatedUser = await User.findOne({ email: updatedData.email }); \nexpect(updatedUser).to.not.be.null; \nexpect(updatedUser.name).to.equal(updatedData.name); \nexpect(updatedUser.email).to.equal(updatedData.email);",
              "err": {},
              "uuid": "efbc8317-8bd6-4950-bbb4-309e79ae6240",
              "parentUUID": "95c76fcd-6b08-4a25-bbcf-27d2599ce673",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Update Email Only ",
              "fullTitle": "API Functional Test Scripts Update Email Only ",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updatedData = {\n    \"email\": \"abc@gmail.com\", \n    \"name\": \"Zayeed\"\n};\n\nawait pactum.spec()\n    .patch('/api/user/{email}')\n    .withPathParams('email', 'zayeed@gmail.com')  \n    .withJson(updatedData)                      \n    .expectStatus(200)                          \n    .expectJsonLike({\n        \"message\": 'User partially updated successfully',\n        \"user\": {\n            \"name\": updatedData.name,\n            \"email\": updatedData.email\n        }\n    })\n    .expectJsonSchema({\n        \"type\": \"object\",\n        \"properties\": {\n          \"message\": {\n            \"type\": \"string\",\n            \"enum\": [\"User partially updated successfully\"]\n          },\n          \"user\": {\n            \"type\": \"object\",\n            \"properties\": {\n              \"name\": {\n                \"type\": \"string\"\n              },\n              \"email\": {\n                \"type\": \"string\",\n                \"format\": \"email\"\n              }\n            },\n            \"required\": [\"name\", \"email\"]\n          }\n        },\n        \"required\": [\"message\", \"user\"]\n      }\n      );\n    const updatedUser = await User.findOne({ email: updatedData.email });\n    expect(updatedUser).to.not.be.null; \n    expect(updatedUser.name).to.equal(updatedData.name); \n    expect(updatedUser.email).to.equal(updatedData.email);",
              "err": {},
              "uuid": "c63ef105-16c2-4706-82b1-f91be5f7a659",
              "parentUUID": "95c76fcd-6b08-4a25-bbcf-27d2599ce673",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Delete a User",
              "fullTitle": "API Functional Test Scripts Delete a User",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "await pactum.spec()\n    .delete('/api/user/{email}')\n    .withPathParams('email', 'updatedEmail@gmail.com')\n    .expectStatus(200)\n    .expectJson({ message: 'User deleted successfully' })\n    .expectJsonSchema({\n        \"type\": \"object\",\n        \"properties\": {\n          \"message\": {\n            \"type\": \"string\",\n            \"enum\": [\"User deleted successfully\"]\n          }\n        },\n        \"required\": [\"message\"]\n      }\n      );\n    const deletedUser = await User.findOne({ email: 'updatedEmail@gmail.com' });\n    expect(deletedUser).to.be.null;",
              "err": {},
              "uuid": "0db3224b-a82a-4263-8b5a-ed9632264683",
              "parentUUID": "95c76fcd-6b08-4a25-bbcf-27d2599ce673",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e97bd7fd-79a6-40ca-bb5b-59d414cbc930",
            "6761b87e-2157-444f-b71f-dcc84eac0ce5",
            "efbc8317-8bd6-4950-bbb4-309e79ae6240",
            "c63ef105-16c2-4706-82b1-f91be5f7a659",
            "0db3224b-a82a-4263-8b5a-ed9632264683"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 101,
          "root": false,
          "rootEmpty": false,
          "_timeout": 10000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 10000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.7.3"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}